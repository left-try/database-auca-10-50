postgres=# BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
COMMIT;
BEGIN
UPDATE 1
UPDATE 1
COMMIT
postgres=# BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
-- Something went wrong, undo everything
ROLLBACK;
BEGIN
UPDATE 1
UPDATE 1
ROLLBACK
postgres=# BEGIN;

-- Check if account 1 has sufficient balance
SELECT balance FROM accounts WHERE account_id = 1;

-- If sufficient, perform the transfer
UPDATE accounts SET balance = balance - 500 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 500 WHERE account_id = 2;

-- If everything is correct, commit
COMMIT;
BEGIN
 balance
---------
 1400.00
(1 row)

UPDATE 1
UPDATE 1
COMMIT
postgres=# BEGIN;
INSERT INTO orders (customer_id, total) VALUES (1, 250.00);
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 2);
UPDATE inventory SET stock = stock - 2 WHERE product_id = 101;
-- If any of these fail, ALL are rolled back
COMMIT;
BEGIN
ERROR:  insert or update on table "orders" violates foreign key constraint "orders_customer_id_fkey"
DETAIL:  Key (customer_id)=(1) is not present in table "customers".
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
postgres=# BEGIN;
INSERT INTO customers (name, email) VALUES ('John Doe', 'john@email.com');
INSERT INTO orders (customer_id, total) VALUES (LASTVAL(), 100.00);
COMMIT;
BEGIN
INSERT 0 1
ERROR:  insert or update on table "orders" violates foreign key constraint "orders_customer_id_fkey"
DETAIL:  Key (customer_id)=(2) is not present in table "customers".
ROLLBACK
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SELECT * FROM accounts; -- May see uncommitted changes
COMMIT;
BEGIN
 account_id | owner_name | balance
------------+------------+---------
          1 | Alice      |  900.00
          2 | Bob        | 1100.00
(2 rows)

COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
SELECT * FROM accounts WHERE balance > 1000;
-- Another transaction might modify data here
SELECT * FROM accounts WHERE balance > 1000; -- May return different results
COMMIT;
BEGIN
 account_id | owner_name | balance
------------+------------+---------
          2 | Bob        | 1100.00
(1 row)

 account_id | owner_name | balance
------------+------------+---------
          2 | Bob        | 1100.00
(1 row)

COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT * FROM accounts WHERE balance > 1000;
-- Even if other transactions modify data, this query will return same results
SELECT * FROM accounts WHERE balance > 1000;
COMMIT;
BEGIN
 account_id | owner_name | balance
------------+------------+---------
          2 | Bob        | 1100.00
(1 row)

 account_id | owner_name | balance
------------+------------+---------
          2 | Bob        | 1100.00
(1 row)

COMMIT
postgres=#
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT * FROM accounts;
UPDATE accounts SET balance = balance * 1.05; -- 5% interest
COMMIT;

BEGIN
 account_id | owner_name | balance
------------+------------+---------
          1 | Alice      |  900.00
          2 | Bob        | 1100.00
(2 rows)

UPDATE 2
COMMIT
postgres=# SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
WARNING:  SET TRANSACTION can only be used in transaction blocks
SET
postgres=# BEGIN;

INSERT INTO customers (name, email) VALUES ('Alice', 'alice@email.com');

SAVEPOINT after_customer_insert;

INSERT INTO orders (customer_id, total) VALUES (1, 500.00);

-- Something went wrong with the order, rollback to savepoint
ROLLBACK TO SAVEPOINT after_customer_insert;

-- Customer insert is still there, but order insert is undone
INSERT INTO orders (customer_id, total) VALUES (1, 300.00);

COMMIT;
BEGIN
INSERT 0 1
SAVEPOINT
ERROR:  insert or update on table "orders" violates foreign key constraint "orders_customer_id_fkey"
DETAIL:  Key (customer_id)=(1) is not present in table "customers".
ROLLBACK
ERROR:  insert or update on table "orders" violates foreign key constraint "orders_customer_id_fkey"
DETAIL:  Key (customer_id)=(1) is not present in table "customers".
ROLLBACK
postgres=# BEGIN;

INSERT INTO products (name, price) VALUES ('Laptop', 999.99);
SAVEPOINT sp1;

INSERT INTO products (name, price) VALUES ('Mouse', 25.99);
SAVEPOINT sp2;

INSERT INTO products (name, price) VALUES ('Invalid Product', -50.00);
-- This violates business rules

ROLLBACK TO SAVEPOINT sp2; -- Removes invalid product insert
-- Laptop and Mouse inserts are still active

INSERT INTO products (name, price) VALUES ('Keyboard', 79.99);

COMMIT;
BEGIN
ERROR:  null value in column "product_id" of relation "products" violates not-null constraint
DETAIL:  Failing row contains (null, Laptop, 999.99).
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  savepoint "sp2" does not exist
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
postgres=# BEGIN;
INSERT INTO logs (message) VALUES ('Starting process');
SAVEPOINT process_start;

-- Do some work
INSERT INTO logs (message) VALUES ('Process completed');

-- If everything is OK, release the savepoint
RELEASE SAVEPOINT process_start;

COMMIT;
BEGIN
INSERT 0 1
SAVEPOINT
INSERT 0 1
RELEASE
COMMIT
postgres=# BEGIN;
UPDATE inventory SET stock = stock - 1 WHERE product_id = 101;
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 1);
COMMIT;
BEGIN
UPDATE 1
ERROR:  insert or update on table "order_items" violates foreign key constraint "order_items_order_id_fkey"
DETAIL:  Key (order_id)=(1) is not present in table "orders".
ROLLBACK
postgres=# BEGIN;
DO $$
DECLARE
    insufficient_funds EXCEPTION;
    current_balance DECIMAL;
BEGIN
    SELECT balance INTO current_balance FROM accounts WHERE account_id = 1;

    IF current_balance < 100 THEN
        RAISE insufficient_funds;
    END IF;

    UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
    UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;

EXCEPTION
    WHEN insufficient_funds THEN
        RAISE NOTICE 'Transaction failed: Insufficient funds';
        ROLLBACK;
END $$;
BEGIN
ERROR:  type "exception" does not exist
LINE 3:     insufficient_funds EXCEPTION;
                               ^
postgres=!# BEGIN;

-- Main operation
INSERT INTO orders (customer_id, total) VALUES (1, 1000.00);

SAVEPOINT before_items;

-- Add items (might fail for some items)
INSERT INTO order_items (order_id, product_id, quantity)
VALUES (currval('orders_id_seq'), 101, 2);

-- If this fails, rollback to savepoint and continue
INSERT INTO order_items (order_id, product_id, quantity)
VALUES (currval('orders_id_seq'), 102, 1);

COMMIT;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
postgres=# SELECT
    blocked_locks.pid AS blocked_pid,
    blocked_activity.usename AS blocked_user,
    blocking_locks.pid AS blocking_pid,
    blocking_activity.usename AS blocking_user,
    blocked_activity.query AS blocked_statement
FROM pg_catalog.pg_locks blocked_locks
JOIN pg_catalog.pg_stat_activity blocked_activity
    ON blocked_activity.pid = blocked_locks.pid
JOIN pg_catalog.pg_locks blocking_locks
    ON blocking_locks.locktype = blocked_locks.locktype
WHERE NOT blocked_locks.granted;
ERROR:  missing FROM-clause entry for table "blocking_activity"
LINE 5:     blocking_activity.usename AS blocking_user,
            ^
postgres=# BEGIN;
INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
INSERT INTO user_preferences (user_id, theme) VALUES (currval('users_id_seq'), 'dark');
COMMIT;

-- Avoid: Relying on autocommit for related operations
INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
-- If this fails, the audit log entry above is already committed
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');

BEGIN
ERROR:  column "timestamp" of relation "audit_log" does not exist
LINE 1: INSERT INTO audit_log (action, timestamp) VALUES ('user_crea...
                                       ^
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
ERROR:  column "timestamp" of relation "audit_log" does not exist
LINE 1: INSERT INTO audit_log (action, timestamp) VALUES ('user_crea...
                                       ^
INSERT 0 1