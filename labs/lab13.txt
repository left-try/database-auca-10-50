postgres=# SELECT first_name, last_name, salary
FROM employees
WHERE salary > (
    SELECT AVG(salary)  -- This scalar subquery returns a single value
    FROM employees
);

 first_name | last_name |  salary
------------+-----------+-----------
 Alice      | Ivanova   | 120000.00
 Boris      | Kim       |  95000.00
 Clara      | Lee       |  90000.00
 Hamid      | Bekov     | 105000.00
(4 rows)

postgres=# WITH regional_sales AS (
    SELECT region_id, SUM(amount) AS total_sales
    FROM orders
    GROUP BY region_id
)
SELECT region_id, total_sales
FROM regional_sales
WHERE total_sales > 1000000;
 region_id | total_sales
-----------+-------------
(0 rows)

postgres=# WITH RECURSIVE org_chart AS (
    -- Anchor: Find the top-level manager (e.g., who has no manager)
    SELECT employee_id, first_name, last_name, manager_id
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    -- Recursive: Find everyone who reports to the people already in the chart
    SELECT e.employee_id, e.first_name, e.last_name, e.manager_id
    FROM employees e
    INNER JOIN org_chart oc ON e.manager_id = oc.employee_id
)
SELECT * FROM org_chart;
 employee_id | first_name | last_name | manager_id
-------------+------------+-----------+------------
           1 | Alice      | Ivanova   |
           4 | Daniyar    | Uulu      |
           7 | Gulzat     | Sultanova |
           2 | Boris      | Kim       |          1
           3 | Clara      | Lee       |          1
           5 | Elena      | Park      |          4
           6 | Farid      | Askarov   |          4
           8 | Hamid      | Bekov     |          1
           9 | Indira     | Toktobek  |          7
          10 | Jack       | Brown     |          2
(10 rows)

postgres=# SELECT product_name FROM warehouse_1
UNION
SELECT product_name FROM warehouse_2;
 product_name
--------------
 Mouse
 Dock
 Laptop
 Keyboard
 Monitor
(5 rows)

postgres=# SELECT product_id FROM warehouse_1 WHERE quantity = 0
INTERSECT
SELECT product_id FROM warehouse_2 WHERE quantity = 0;
 product_id
------------
          4
          2
(2 rows)

postgres=# SELECT
    first_name,
    last_name,
    department,
    salary,
    RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
FROM employees;
 first_name | last_name | department  |  salary   | dept_salary_rank
------------+-----------+-------------+-----------+------------------
 Alice      | Ivanova   | Engineering | 120000.00 |                1
 Hamid      | Bekov     | Engineering | 105000.00 |                2
 Boris      | Kim       | Engineering |  95000.00 |                3
 Clara      | Lee       | Engineering |  90000.00 |                4
 Jack       | Brown     | Engineering |  76000.00 |                5
 Gulzat     | Sultanova | HR          |  65000.00 |                1
 Indira     | Toktobek  | HR          |  52000.00 |                2
 Daniyar    | Uulu      | Sales       |  80000.00 |                1
 Farid      | Askarov   | Sales       |  70000.00 |                2
 Elena      | Park      | Sales       |  62000.00 |                3
(10 rows)

postgres=# SELECT
    product_name,
    SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022,
    SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023,
    SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
FROM sales
GROUP BY product_name;
 product_name | year_2022 | year_2023 | year_2024
--------------+-----------+-----------+-----------
 Mouse        |  12000.00 |  15000.00 |  18000.00
 Keyboard     |  22000.00 |  25000.00 |  28000.00
 Laptop       | 150000.00 | 175000.00 | 210000.00
(3 rows)

postgres=# SELECT product_name, '2022' AS year, year_2022 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2023' AS year, year_2023 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2024' AS year, year_2024 AS sales_amount FROM pivoted_sales
ORDER BY product_name, year;
 product_name | year | sales_amount
--------------+------+--------------
 Keyboard     | 2022 |     22000.00
 Keyboard     | 2023 |     25000.00
 Keyboard     | 2024 |     28000.00
 Laptop       | 2022 |    150000.00
 Laptop       | 2023 |    175000.00
 Laptop       | 2024 |    210000.00
 Mouse        | 2022 |     12000.00
 Mouse        | 2023 |     15000.00
 Mouse        | 2024 |     18000.00
(9 rows)

postgres=# SELECT
    employee_id,
    SUM(salary) OVER (PARTITION BY department) AS total_dept_salary,
    AVG(salary) FILTER (WHERE tenure > 5) OVER () AS avg_salary_senior
FROM employees;
 employee_id | total_dept_salary | avg_salary_senior
-------------+-------------------+--------------------
           1 |         486000.00 | 96666.666666666667
           2 |         486000.00 | 96666.666666666667
           3 |         486000.00 | 96666.666666666667
           8 |         486000.00 | 96666.666666666667
          10 |         486000.00 | 96666.666666666667
           7 |         117000.00 | 96666.666666666667
           9 |         117000.00 | 96666.666666666667
           6 |         212000.00 | 96666.666666666667
           4 |         212000.00 | 96666.666666666667
           5 |         212000.00 | 96666.666666666667
(10 rows)

postgres=#
SELECT product_name, status
FROM orders
ORDER BY
    CASE status
        WHEN 'High Priority' THEN 1
        WHEN 'Medium Priority' THEN 2
        WHEN 'Low Priority' THEN 3
        ELSE 4
    END;

 product_name |     status
--------------+-----------------
 Dock         | High Priority
 Laptop       | High Priority
 Laptop       | Medium Priority
 Monitor      | Medium Priority
 Keyboard     | Low Priority
 Mouse        | Low Priority
 Monitor      | Low Priority
(7 rows)

postgres=#