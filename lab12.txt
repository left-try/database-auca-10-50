postgres=# DROP TABLE IF EXISTS order_items, products, orders, customers, employees, users, user_profiles, authors, books, enrollments, courses, students CASCADE;
NOTICE:  table "order_items" does not exist, skipping
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to constraint student_enrollments_course_id_fkey on table student_enrollments
drop cascades to constraint book_authors_book_id_fkey on table book_authors
drop cascades to constraint loans_book_id_fkey on table loans
drop cascades to constraint book_authors_author_id_fkey on table book_authors
DROP TABLE
postgres=# CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);
CREATE TABLE
postgres=# CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(customer_id),
    order_date DATE,
    total_amount DECIMAL(10,2)
);
CREATE TABLE
postgres=# CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10,2)
);
CREATE TABLE
postgres=# CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(order_id),
    product_id INTEGER REFERENCES products(product_id),
    quantity INTEGER
);
CREATE TABLE
postgres=# CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    manager_id INTEGER REFERENCES employees(employee_id)
);
CREATE TABLE
postgres=# CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50)
);
CREATE TABLE user_profiles (
    profile_id SERIAL PRIMARY KEY,
    user_id INTEGER UNIQUE REFERENCES users(user_id),
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    phone VARCHAR(20)
);
CREATE TABLE
CREATE TABLE
postgres=# CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    student_name VARCHAR(100)
);
CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(100)
);
CREATE TABLE enrollments (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER REFERENCES students(student_id),
    course_id INTEGER REFERENCES courses(course_id),
    enrollment_date DATE,
    grade CHAR(2)
);
CREATE TABLE
CREATE TABLE
CREATE TABLE
postgres=# INSERT INTO customers (name, email) VALUES
('Alice', 'alice@example.com'),
('Bob', 'bob@example.com'),
('Charlie', 'charlie@example.com');
INSERT 0 3
postgres=# INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2024-01-10', 250.00),
(1, '2024-03-15', 120.50),
(2, '2024-02-01', 99.99);
INSERT 0 3
postgres=# INSERT INTO products (product_name, price) VALUES
('Laptop', 800.00),
('Mouse', 20.00),
('Keyboard', 50.00);
INSERT 0 3
postgres=# INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 1), (1, 2, 2), (2, 3, 1), (3, 2, 3);
INSERT 0 4
postgres=# INSERT INTO employees (name, manager_id) VALUES
('John', NULL),
('Sarah', 1),
('Tom', 1),
('Emma', 2);
INSERT 0 4
postgres=# INSERT INTO users (username) VALUES ('johndoe'), ('alicew');
INSERT INTO user_profiles (user_id, first_name, last_name, phone)
VALUES (1, 'John', 'Doe', '555-1234'), (2, 'Alice', 'Williams', '555-9876');
INSERT 0 2
INSERT 0 2
postgres=# INSERT INTO students (student_name) VALUES ('Nursultan'), ('Meerim'), ('Tilek');
INSERT INTO courses (course_name) VALUES ('Math'), ('Physics'), ('Programming');
INSERT INTO enrollments (student_id, course_id, enrollment_date, grade) VALUES
(1, 1, '2024-01-10', 'A'),
(1, 2, '2024-02-01', 'B'),
(2, 3, '2024-01-15', 'A'),
(3, 2, '2024-03-10', NULL);
INSERT 0 3
INSERT 0 3
INSERT 0 4
postgres=# SELECT c.name, c.email, o.order_date, o.total_amount
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id;
 name  |       email       | order_date | total_amount
-------+-------------------+------------+--------------
 Alice | alice@example.com | 2024-01-10 |       250.00
 Alice | alice@example.com | 2024-03-15 |       120.50
 Bob   | bob@example.com   | 2024-02-01 |        99.99
(3 rows)

postgres=# SELECT c.name, c.email, o.order_date, o.total_amount
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id;
  name   |        email        | order_date | total_amount
---------+---------------------+------------+--------------
 Alice   | alice@example.com   | 2024-01-10 |       250.00
 Alice   | alice@example.com   | 2024-03-15 |       120.50
 Bob     | bob@example.com     | 2024-02-01 |        99.99
 Charlie | charlie@example.com |            |
(4 rows)

postgres=# SELECT c.name, c.email, o.order_date, o.total_amount
FROM customers c
RIGHT JOIN orders o ON c.customer_id = o.customer_id;
 name  |       email       | order_date | total_amount
-------+-------------------+------------+--------------
 Alice | alice@example.com | 2024-01-10 |       250.00
 Alice | alice@example.com | 2024-03-15 |       120.50
 Bob   | bob@example.com   | 2024-02-01 |        99.99
(3 rows)

postgres=# SELECT c.name, c.email, o.order_date, o.total_amount
FROM customers c
FULL OUTER JOIN orders o ON c.customer_id = o.customer_id;
  name   |        email        | order_date | total_amount
---------+---------------------+------------+--------------
 Alice   | alice@example.com   | 2024-01-10 |       250.00
 Alice   | alice@example.com   | 2024-03-15 |       120.50
 Bob     | bob@example.com     | 2024-02-01 |        99.99
 Charlie | charlie@example.com |            |
(4 rows)

postgres=# SELECT c.name, p.product_name
FROM customers c
CROSS JOIN products p;
  name   | product_name
---------+--------------
 Alice   | Laptop
 Bob     | Laptop
 Charlie | Laptop
 Alice   | Mouse
 Bob     | Mouse
 Charlie | Mouse
 Alice   | Keyboard
 Bob     | Keyboard
 Charlie | Keyboard
(9 rows)

postgres=# SELECT c.name, o.order_date, oi.quantity, p.product_name, p.price
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_items oi ON o.order_id = oi.order_id
INNER JOIN products p ON oi.product_id = p.product_id;
 name  | order_date | quantity | product_name | price
-------+------------+----------+--------------+--------
 Alice | 2024-01-10 |        1 | Laptop       | 800.00
 Alice | 2024-01-10 |        2 | Mouse        |  20.00
 Alice | 2024-03-15 |        1 | Keyboard     |  50.00
 Bob   | 2024-02-01 |        3 | Mouse        |  20.00
(4 rows)

postgres=# SELECT e1.name AS employee, e2.name AS manager
FROM employees e1
LEFT JOIN employees e2 ON e1.manager_id = e2.employee_id;
 employee | manager
----------+---------
 John     |
 Sarah    | John
 Tom      | John
 Emma     | Sarah
(4 rows)

postgres=# SELECT c.name, o.order_date, o.total_amount
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= '2024-01-01'
AND o.total_amount > 100;
 name  | order_date | total_amount
-------+------------+--------------
 Alice | 2024-01-10 |       250.00
 Alice | 2024-03-15 |       120.50
(2 rows)

postgres=# SELECT u.username, up.first_name, up.last_name, up.phone
FROM users u
LEFT JOIN user_profiles up ON u.user_id = up.user_id;
 username | first_name | last_name |  phone
----------+------------+-----------+----------
 johndoe  | John       | Doe       | 555-1234
 alicew   | Alice      | Williams  | 555-9876
(2 rows)

postgres=# SELECT s.student_name, c.course_name, e.enrollment_date, e.grade
FROM students s
INNER JOIN enrollments e ON s.student_id = e.student_id
INNER JOIN courses c ON e.course_id = c.course_id
WHERE e.grade IS NOT NULL
ORDER BY s.student_name, c.course_name;
 student_name | course_name | enrollment_date | grade
--------------+-------------+-----------------+-------
 Meerim       | Programming | 2024-01-15      | A
 Nursultan    | Math        | 2024-01-10      | A
 Nursultan    | Physics     | 2024-02-01      | B
(3 rows)

postgres=# CREATE INDEX idx_orders_customer_id ON orders(customer_id);
CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);
CREATE INDEX
CREATE INDEX
CREATE INDEX
postgres=# SELECT c.name, o.order_date
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id;

 name  | order_date
-------+------------
 Alice | 2024-03-15
 Alice | 2024-01-10
 Bob   | 2024-02-01
(3 rows)

postgres=# SELECT c.name, o.order_date
FROM customers c, orders o;

  name   | order_date
---------+------------
 Alice   | 2024-01-10
 Alice   | 2024-03-15
 Alice   | 2024-02-01
 Bob     | 2024-01-10
 Bob     | 2024-03-15
 Bob     | 2024-02-01
 Charlie | 2024-01-10
 Charlie | 2024-03-15
 Charlie | 2024-02-01
(9 rows)

postgres=# SELECT c.name, o.order_date
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id;
 name  | order_date
-------+------------
 Alice | 2024-03-15
 Alice | 2024-01-10
 Bob   | 2024-02-01
(3 rows)

postgres=# SELECT c.name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.customer_id IS NULL;
  name
---------
 Charlie
(1 row)
